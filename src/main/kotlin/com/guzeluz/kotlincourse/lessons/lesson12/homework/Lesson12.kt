package com.guzeluz.kotlincourse.lessons.lesson12.homework

fun main() {

//Задачи на приведение коллекции к значению

    val numbers = listOf(-1235, 224, -3345, 4645, -533, 834, 8439)

//1. Проверить, что размер коллекции больше 5 элементов.
    numbers.size > 5

//2. Проверить, что коллекция пустая
    numbers.isEmpty()

//3. Проверить, что коллекция не пустая
    numbers.isNotEmpty()

//4. Взять элемент по индексу или создать значение если индекса не существует
    numbers.getOrElse(50) { 586 }

//5. Собрать коллекцию в строку
    numbers.joinToString { " " }

//6. Посчитать сумму всех значений
    numbers.sum()

//7. Посчитать среднее
    numbers.average()

//8. Взять максимальное число
    numbers.max()

//9. Взять минимальное число
    numbers.min()

//10. Взять первое число или null
    numbers.firstOrNull()

//11. Проверить что коллекция содержит элемент
    numbers.contains(6)

//Задачи на обработку коллекций

//12. Отфильтровать коллекцию по диапазону 18-30
    numbers.filter { it in 18..30 }

//13. Выбрать числа, которые не делятся на 2 и 3 одновременно
    numbers.filterNot { it % 2 == 0 && it % 3 == 0 }

//14. Очистить текстовую коллекцию от null элементов
    numbers.filterNotNull()

//15. Преобразовать текстовую коллекцию в коллекцию длин слов
    val strings = listOf("Hello", "World", "Kotlin")
    val stringsLength = mutableListOf<Int>()
    strings.forEach {
        stringsLength.add(it.length)
    }

//16. Преобразовать текстовую коллекцию в мапу, где ключи - перевёрнутые слова, а значения - длина слов
    strings.map { Pair(it.reversed(), it.length) }

//17. Отсортировать список в алфавитном порядке
    strings.sorted()

//18. Взять первые 3 элемента списка
    strings.take(3)

//19. Распечатать квадраты элементов списка
    println(numbers.associate { it to it * it })

//20. Группировать список по первой букве слов
    strings.groupBy { it.first() }

//21. Очистить список от дублей
    numbers.distinct()

//22. Отсортировать список по убыванию
    numbers.sortedDescending()

//23. Взять последние 3 элемента списка
    numbers.takeLast(3)

    println(analiseScores(listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)))
    println(
        getWordLengthAverage(
            listOf(
                "Стол",
                "табурет",
                "ваза",
                "Кружка",
                "Зеркало",
                "ковер",
                "Шкаф",
                "часы",
                "Люстра",
                "подушка",
                "Картина",
                "столик",
                "Вазон",
                "шторы",
                "Пуф",
                "книга",
                "Фоторамка",
                "светильник",
                "Коврик",
                "вешалка",
                "Подставка",
                "телевизор",
                "Комод",
                "полка",
                "Абажур",
                "диван",
                "Кресло",
                "занавеска",
                "Бра",
                "пепельница",
                "Глобус",
                "статуэтка",
                "Поднос",
                "фигурка",
                "Ключница",
                "плед",
                "Тумба",
                "игрушка",
                "Настенные часы",
                "подсвечник",
                "Журнальный столик",
                "сувенир",
                "Корзина для белья",
                "посуда",
                "Настольная лампа",
                "торшер",
                "Этажерка"
            )
        )
    )
    println(
        createCatalog(
            listOf(
                "Стол",
                "табурет",
                "ваза",
                "Кружка",
                "Зеркало",
                "ковер",
                "Шкаф",
                "часы",
                "Люстра",
                "подушка",
                "Картина",
                "столик",
                "Вазон",
                "шторы",
                "Пуф",
                "книга",
                "Фоторамка",
                "светильник",
                "Коврик",
                "вешалка",
                "Подставка",
                "телевизор",
                "Комод",
                "полка",
                "Абажур",
                "диван",
                "Кресло",
                "занавеска",
                "Бра",
                "пепельница",
                "Глобус",
                "статуэтка",
                "Поднос",
                "фигурка",
                "Ключница",
                "плед",
                "Тумба",
                "игрушка",
                "Настенные часы",
                "подсвечник",
                "Журнальный столик",
                "сувенир",
                "Корзина для белья",
                "посуда",
                "Настольная лампа",
                "торшер",
                "Этажерка"
            )
        )
    )
    println(getNumbersCategory(listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)))
    println(searchElement(listOf(22, 18, 30, 45, 17, null, 60), 18))
}


//    Задача 24. Характеристика числовой коллекции.
//Напиши функцию, которая принимает коллекцию чисел и
// возвращает строку с характеристикой коллекции
// используя конструкцию when
//* Если коллекция пустая - “Пусто”
//* Если количество элементов меньше пяти - “Короткая”
//* Если коллекция начинается с 0 - “Стартовая”
//* Если сумма всех чисел больше 10000 - “Массивная”
//* Если среднее значение равно 10 - “Сбалансированная”
//* Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
//* Если максимальное число меньше -10 - “Отрицательная”
//* Если минимальное число больше 1000 - “Положительная”
//* Если содержит одновременно числа 3 и 14 - “Пи***тая”
//* Иначе - “Уникальная”
//Вызвать метод с данными, подходящими под каждую из веток

fun checkNumbers(numbers: List<Int>): String {
    val result = when {
        numbers.isEmpty() -> "Пусто"
        numbers.size < 5 -> "Короткая"
        numbers.first() == 0 -> "Стартовая"
        numbers.sum() > 10000 -> "Массивная"
        numbers.average() == 10.0 -> "Сбалансированная"
        numbers.joinToString()
            .length == 20 -> "Клейкая"

        numbers.max() < -10 -> "Отрицательная"
        numbers.min() > 1000 -> "Положительная"
        numbers.contains(3) && numbers.contains(4) -> "Пи***тая"
        else -> "Уникальная"
    }
    return result
}


//    Задача 25. Анализ учебных оценок.
//Напиши функцию, которая принимает список чисел и
// возвращает список чисел.
//Пример данных:
// val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
//Цель: Отфильтровать удовлетворительные оценки (>=60),
// отсортировать оставшиеся по возрастанию и взять первые 3.
// Вызывай методы обработки и фильтрации последовательно один из другого,
// чтобы результат предыдущего метода являлся основой для следующего.

fun analiseScores(numbers: List<Int>): List<Int> {
    return numbers
        .filter { it >= 60 }
        .sorted()
        .take(3)
}

//    Задача 26. Создание каталога по первой букве.
//Напиши функцию, которая принимает список строк и
// возвращает словарь с ключом - буквой и значением - строкой.
//Начальные значения:
// val list = listOf("Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка")
//Цель: Привести все слова в списке к нижнему регистру,
// сгруппировать в каталог по первой букве используя метод groupBy
fun createCatalog(strings: List<String>): Map<Char, List<String>> {
    val lowercased = strings.map { it.lowercase() }
    return lowercased.groupBy { it.first() }
}

//    Задание 27. Подсчёт средней длины слов в списке.
//Напиши функцию, которая принимает список строк и возвращает строку.
//Начальные значения взять из предыдущей задачи.
//Цель: Перевести все слова в количество букв,
// подсчитать среднее значение.
// Вернуть форматированный текст с двумя знаками после запятой,
// используя функцию format и подходящий шаблон.
fun getWordLengthAverage(strings: List<String>): String {
    val stringsLength = mutableListOf<Int>()
    strings.forEach {
        stringsLength.add(it.length)
    }
    val result = stringsLength.average()
    return result.toString().format() //ToDo
}


//    Задание 28: Категоризация чисел.
//Напиши функцию, которая принимает список чисел и
// возвращает словарь с ключами - строками и значениями - числами.
//Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
//Цель: Отобрать уникальные числа, отсортировать по убыванию и
// сгруппировать по четности (“четные” и “нечетные”).
fun getNumbersCategory(numbers: List<Int>): Map<String, List<Int>> {
    val result = numbers
        .distinct()
        .sortedDescending()
        .groupBy { if (it % 2 == 0) "Четные" else "Нечетные" }
    return result
}

//Задание 29: Поиск первого подходящего элемента.
//Напиши функцию, которая принимает список чисел и число и
// возвращает nullable число.
//Начальные значения:
// val ages = listOf(22, 18, 30, 45, 17, null, 60) и
// число для проверки возраста, например 18.
//Цель: Найти первый возраст в списке,
// который соответствует условию (больше второго аргумента) и вернуть его,
// либо null если значения не нашлось.

fun searchElement(numbers: List<Int?>, number: Int): Int? {
    return numbers.getOrNull() { it < number } //ToDo
}



